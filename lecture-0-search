•	Uninformed search: search problem that uses no problem-specific knowledge
•	Informed search: search problem that uses problem-specific knowledge to find solutions
•	Greedy best-first search: search algorithm that expands the node that is closest to the goal, as estimated by heuristic function h(n)
•	Heuristic Function:
o	Manhattan Distance
 
But it is making the best decision locally only
 
It thought 11 > 13, but actually the 13 method was better 
•	A-star search: search algorithm that expands node with lowest value of g(n) + h(n)
o	g(n): cost to reach node (how many steps needed to take to reach node)
o	h(n): estimated cost to reach goal
o	Optimal if h(n) is admissible (never overestimates the true cost) and h(n) is consistent (for every node n and successor n' with step cost c
•	Adversarial
•	Minimax 
o	Useful when there are 2 players 
o	Think tic-tac-toe
•	MAX(X) aims to maximise the score
•	MIN(O) aims to minimise the score 
•	Game 
o	(S0): initial state
o	Player(s): returns which player to move in state s
o	Action(s): returns which legal moves in state s
o	Results(s,a): returns state after action a taken in state s
o	Terminal(s): checks if state s is a terminal state 
o	Utility(s): final numerical value for terminal state s 
•	Example in Tic Tac Toe
o	Algorithm will put itself in opponent's shoe
o	O is trying to minimise the score, while X is trying to maximise the score 
o	The earlier we are in the game, the deeper the tree
 
•	Function Max-Value(state):
o	If TERMINAL(state):
•	Return UTILITY(state)
V = -∞
•	For action in ACTIONS(state):
V = MAX(v, MIN-Value(Result(action,state)))
Return v
•	For Function Min-Value --> it'll be similar, just that v will be  ∞
•	Depth Limited Mini Max
•	Evaluation function: function that estimates the expected utility of the game from a given state 
•	This will constraint how good or bad the AI is

